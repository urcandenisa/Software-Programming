// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using client.ObjectHandler;
using core.Models;
using System.Collections.Generic;
using System.Linq;
using System.Timers;

namespace client
{
	public partial class ViewRegistrations : NSViewController, IMessageController
	{
        private BaseHandler baseHandler;
		private UserHandler userHandler;
        private bool firstclicked = false;
        private bool secondclicked = false;
        Timer timer;
		public ViewRegistrations (IntPtr handle) : base (handle)
		{
            baseHandler = new BaseHandler(this);
            this.userHandler = new UserHandler(this);
            timer = new Timer(10);
            timer.Enabled = true;
            
            timer.Start();
            timer.Elapsed += new ElapsedEventHandler(OnTimedEvent);
        }

        partial void firstActivity_clicked(NSObject sender)
        {
            if (secondclicked) secondActivity.ContentTintColor = NSColor.SystemBlueColor;
            firstActivity.ContentTintColor = NSColor.Gray;
            firstclicked = true;
        }

        partial void secondActivity_clicked(NSObject sender)
        {
            if (firstclicked) firstActivity.ContentTintColor = NSColor.SystemBlueColor;
            secondActivity.ContentTintColor = NSColor.Gray;
            secondclicked = true;
        }

        private void OnTimedEvent(object sender, ElapsedEventArgs e)
        {
            
            userHandler.viewRegistrations(BaseHandler.username); 
        }

        public override void ViewDidLoad()
        { 
            String username = BaseHandler.username;
            baseHandler = new BaseHandler(this);
            this.userHandler = new UserHandler(this);
        }

        public override void ViewDidAppear()
        {
            base.ViewDidAppear();
            this.userHandler = new UserHandler(this);
        }

        partial void unregister(NSObject sender)
        {
            if(firstclicked == false && secondclicked == false)
            {
                messageLog.StringValue = "Nothing selected. Everything is up to date!";
                //this.View.Window.Close();
            }
            else
            {
                if(firstclicked == true)
                {
                    firstclicked = false;
                    userHandler.unregister(BaseHandler.username, firstActivity.Title);
                }else if(secondclicked == true)
                {
                    secondclicked = false;
                    userHandler.unregister(BaseHandler.username, secondActivity.Title);
                }
            }
        }

        public void openWindow()
        {
            
        }

        public void showActivity(Activity activity)
        {
           
        }

        public void showList(List<Activity> activites)
        {
            this.InvokeOnMainThread(() =>
            {
                
            if (activites != null)
            {
                timer.Stop();

                if (activites.Count > 0) {
                        firstActivity.Title = activites.ElementAt(0).name;
                        firstDescription.Title = activites.ElementAt(0).location + ", " + activites.ElementAt(0).hours;
                        if(activites.Count > 1)
                        {
                            secondActivity.Title = activites.ElementAt(1).name;
                            secondDescription.Title = activites.ElementAt(1).location + ", " + activites.ElementAt(1).hours;
                        }
                    }
                }
            });
        }

        public void showMessage(string message)
        {
          
            this.InvokeOnMainThread(() => { messageLog.StringValue = message; });
            
        }

        public void showUser(User user)
        {
          
        }

        public void showAlert()
        {

            InvokeOnMainThread(() =>
            {
                var storyboard = NSStoryboard.FromName("Main", null);
                var controller = storyboard.InstantiateControllerWithIdentifier("Alert") as NSWindowController;
                controller.ShowWindow(Self);
            });
        }
    }
}
