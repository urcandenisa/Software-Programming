// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using client.ObjectHandler;
using core.Models;
using System.Collections.Generic;
using System.Timers;
using System.Threading.Tasks;

namespace client
{
	public partial class AdministratorView : NSViewController, IMessageController
	{
        private bool enterPressed = false;
        private AdminHandler adminHandler;
        private BaseHandler baseHandler;
        public String segueName;
        public String segueType;
        public String segueHours;
        public String segueLocation;
        public String segueAvailable;
        public String segueMaxNumber;
        public String segueList;
        public String segueFName;
        public String segueLName;
        public String segueCountry;
        public String segueAddress;
        public String segueCity;
        public String segueState;
        bool wasActivity;
        bool wasActivityName;
        Timer timer;
        public AdministratorView(IntPtr handle) : base(handle)
        {
            baseHandler = new BaseHandler(this);
            adminHandler = new AdminHandler(this);
            segueName = "";
            segueType = "";
            segueLocation = "";
            segueHours = "";
            segueList = "";
            segueAvailable = "";
            segueMaxNumber = "";
            segueFName = "";
            segueLName = "";
            segueCity = "";
            segueAddress = "";
            segueState = "";
            segueCountry = "";
            wasActivityName = false;
            wasActivity = false;
            timer = new Timer(10);
            timer.Enabled = true;
            timer.Start();
            timer.Elapsed += new ElapsedEventHandler(OnTimedEvent);
            NSEvent.AddLocalMonitorForEventsMatchingMask(NSEventMask.KeyDown, KeyboardEventHandler);
        }

        private void OnTimedEvent(object sender, ElapsedEventArgs e)
        {
            if(ThingsToDo.closed == true)
            {
                
                this.InvokeOnMainThread(() => { ThingsToDo.closed = false; this.View.Window.Close(); });
                
                timer.Stop();
            }
        }

        public override void ViewDidLoad()
        {
            
            adminHandler = new AdminHandler(this);
            segueName = "";
            segueType = "";
            segueLocation = "";
            segueHours = "";
            segueList = "";
            segueAvailable = "";
            segueMaxNumber = "";
            wasActivityName = false;
            wasActivity = false;
        }



        partial void back(NSObject sender)
        {
            this.View.Window.Close();
            var storyboard = NSStoryboard.FromName("Main", null);
            var controller = storyboard.InstantiateControllerWithIdentifier("LogIn") as NSWindowController;
            controller.ShowWindow(this);
        }

        private NSEvent KeyboardEventHandler(NSEvent keyEvent)
        {
            if (keyEvent.KeyCode == 36)
            {
                enterPressed = true;
            }
            return (keyEvent);
        }

        partial void parkstickets_clicked(NSObject sender)
        {
            var popover = new NSPopover();
            var storyboard = NSStoryboard.FromName("Main", null);
            popover.ContentViewController = storyboard.InstantiateControllerWithIdentifier("ParksTickets") as NSViewController;
            popover.Behavior = NSPopoverBehavior.Transient;
            popover.Show(CoreGraphics.CGRect.Empty, (NSView)sender, NSRectEdge.MinYEdge);
        }

        partial void placesToStay_clicked(NSObject sender)
        {
            var popover = new NSPopover();
            var storyboard = NSStoryboard.FromName("Main", null);
            popover.ContentViewController = storyboard.InstantiateControllerWithIdentifier("PlacesToStay") as NSViewController;
            popover.Behavior = NSPopoverBehavior.Transient;
            popover.Show(CoreGraphics.CGRect.Empty, (NSView)sender, NSRectEdge.MinYEdge);
        }

        partial void shop_clicked(NSObject sender)
        {
            var popover = new NSPopover();
            var storyboard = NSStoryboard.FromName("Main", null);
            popover.ContentViewController = storyboard.InstantiateControllerWithIdentifier("Shop") as NSViewController;
            popover.Behavior = NSPopoverBehavior.Transient;
            popover.Show(CoreGraphics.CGRect.Empty, (NSView)sender, NSRectEdge.MinYEdge);
        }

        partial void thingsToDo_clicked(NSObject sender)
        {
            var popover = new NSPopover();
            var storyboard = NSStoryboard.FromName("Main", null);
            popover.ContentViewController = storyboard.InstantiateControllerWithIdentifier("ThingsToDo") as NSViewController;
            popover.Behavior = NSPopoverBehavior.Transient;
            popover.Show(CoreGraphics.CGRect.Empty, (NSView)sender, NSRectEdge.MinYEdge);
        }

        partial void createAccount_clicked(NSObject sender)
        {
            this.View.Window.Close();
            var storyboard = NSStoryboard.FromName("Main", null);
            var controller = storyboard.InstantiateControllerWithIdentifier("UpdateDeleteAccount") as NSWindowController;
            controller.ShowWindow(this);
        }

        partial void searched(NSSearchField sender)
        {
            if (enterPressed == true)
                {
                    enterPressed = false;
                    String searchingAfter = sender.StringValue;
                this.InvokeOnMainThread(() =>
                {
                    adminHandler.handleSearch(searchingAfter);
                });
            }
            
        }

        public void showMessage(string message)
        {
            
        }

        public void openWindow()
        {
            
        }

        public void showActivity(Activity activity)
        {
            this.InvokeOnMainThread(() => {
                if (activity != null)
                {
                    segueName = activity.name;
                    segueType = activity.type;
                    segueLocation = activity.location;
                    segueHours = activity.hours;
                    segueAvailable = activity.available == true ? "available" : "not available";
                    segueMaxNumber = activity.maxNumber.ToString();
                    wasActivityName = true;
                    PerformSegue("admin1", this);
                }
            });
        }

        public void showUser(User user)
        {
            this.InvokeOnMainThread(() =>
            {if (user != null)
                {
                    segueFName = user.firstName;
                    segueLName = user.lastName;
                    segueCountry = user.country;
                    segueCity = user.city;
                    segueAddress = user.address;
                    segueState = user.state;
                    PerformSegue("admin3", this);
                }
            });
        }

        public void showList(List<Activity> activities)
        {
            this.InvokeOnMainThread(() =>
            {
                if (activities != null)
                {
                    foreach (Activity activity in activities)
                    {
                        String available = activity.available == true ? "available" : "not available";
                        segueList += activity.name + ", " + activity.type + ", " + activity.location + ", " + activity.hours + ", " + available + ", maximum number of participants: " + activity.maxNumber + "\n";
                    }
                    wasActivity = true;
                    PerformSegue("admin2", this);
                    segueList = "";
                }
            });
        }

        public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
        {
            this.InvokeOnMainThread(() =>
            {
                if (wasActivityName == true)
                {
                    wasActivityName = false;
                    var destination = segue.DestinationController as AdminSearch;
                    destination.segueName = segueName;
                    destination.segueLocation = segueLocation;
                    destination.segueType = segueType;
                    destination.segueAvailable = segueAvailable;
                    destination.segueMaxNumber = segueMaxNumber;
                    destination.segueHours = segueHours;
                }
                else if(wasActivity == true)
                {
                    wasActivity = false;
                    var destination = segue.DestinationController as SearchActivities;
                    destination.segueList = segueList;
                }
                else
                {
                    
                    var destination = segue.DestinationController as SearchUser;
                    destination.segueFName = segueFName;
                    destination.segueAddress = segueAddress;
                    destination.segueLName = segueLName;
                    destination.segueCountry = segueCountry;
                    destination.segueCity = segueCity;
                    destination.segueState = segueState;
                }
            });
        }

        public void showAlert()
        {
            var alert = new NSAlert()
            {
                AlertStyle = NSAlertStyle.Critical,
                InformativeText = "We need to give the user the ability to save the document here...",
                MessageText = "Save Document",
            };
            alert.RunModal();
        }
    }
}
