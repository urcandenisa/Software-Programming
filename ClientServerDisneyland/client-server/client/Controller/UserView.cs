// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using client.ObjectHandler;
using core.Models;
using System.Collections.Generic;
using System.Timers;
using System.Threading;
using Timer = System.Timers.Timer;
using System.Threading.Tasks;

namespace client
{
    public partial class UserView : NSViewController, IMessageController
    {
        private bool enterPressed = false;
        private UserHandler userHandler;
        private BaseHandler baseHandler;
        public String segueName;
        public String segueType;
        public String segueHours;
        public String segueLocation;
        public String segueList;
        bool wasActivityName;
        Timer timer;
        Timer timer2;
        private bool both = false;
        public UserView(IntPtr handle) : base(handle)
        {
            baseHandler = new BaseHandler(this);
            this.userHandler = new UserHandler(this);
            segueName = "";
            segueType = "";
            segueLocation = "";
            segueHours = "";
            segueList = "";
            wasActivityName = false;
            timer2 = new Timer(10);
            timer2.Enabled = true;
            timer2.Start();
            timer2.Elapsed += new ElapsedEventHandler(OnTimedEvent2);
            timer = new Timer(10);
            timer.Enabled = true;
            timer.Start();
            timer.Elapsed += new ElapsedEventHandler(OnTimedEvent);
            NSEvent.AddLocalMonitorForEventsMatchingMask(NSEventMask.KeyDown, KeyboardEventHandler);
        }
        private void OnTimedEvent2(object sender, ElapsedEventArgs e)
        {
            if (Register.didGoBack == true)
            {
                Register.didGoBack = false; this.View.AlphaValue = (nfloat)1.0; 
                timer2.Stop();
            }
        }

        private void OnTimedEvent(object sender, ElapsedEventArgs e)
        {
            if(ThingsToDo.viewRegistrations == true)
            {
                this.View.Hidden = true;
                ThingsToDo.viewRegistrations = false;
                this.View.AlphaValue = (nfloat)0.5; 
                both = true;
            }
            if (ThingsToDo.registering == true)
            {
                ThingsToDo.registering = false; this.View.AlphaValue = (nfloat)0.5; 
                if(both)
                timer.Stop();
            }
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            baseHandler = new BaseHandler(this);
            this.userHandler = new UserHandler(this);
        }
        private NSEvent KeyboardEventHandler(NSEvent keyEvent)
        {
            if (keyEvent.KeyCode == 36)
            {
                enterPressed = true;
            }
            return (keyEvent);
        }

        partial void back(NSObject sender)
        {
            this.View.Window.Close();
            var storyboard = NSStoryboard.FromName("Main", null);
            var controller = storyboard.InstantiateControllerWithIdentifier("LogIn") as NSWindowController;
            controller.ShowWindow(this);
        }

        partial void cart_clicked(NSObject sender)
        {
            var popover = new NSPopover();
            var storyboard = NSStoryboard.FromName("Main", null);
            popover.ContentViewController = storyboard.InstantiateControllerWithIdentifier("Cart") as NSViewController;
            popover.Behavior = NSPopoverBehavior.Transient;
            popover.Show(CoreGraphics.CGRect.Empty, (NSView)sender, NSRectEdge.MinYEdge);
        }

        partial void parkstickets_clicked(NSObject sender)
        {
            var popover = new NSPopover();
            var storyboard = NSStoryboard.FromName("Main", null);
            popover.ContentViewController = storyboard.InstantiateControllerWithIdentifier("ParksTickets") as NSViewController;
            popover.Behavior = NSPopoverBehavior.Transient;
            popover.Show(CoreGraphics.CGRect.Empty, (NSView)sender, NSRectEdge.MinYEdge);
        }

        partial void placesToStay_clicked(NSObject sender)
        {
            var popover = new NSPopover();
            var storyboard = NSStoryboard.FromName("Main", null);
            popover.ContentViewController = storyboard.InstantiateControllerWithIdentifier("PlacesToStay") as NSViewController;
            popover.Behavior = NSPopoverBehavior.Transient;
            popover.Show(CoreGraphics.CGRect.Empty, (NSView)sender, NSRectEdge.MinYEdge);
        }

        partial void shop_clicked(NSObject sender)
        {
            var popover = new NSPopover();
            var storyboard = NSStoryboard.FromName("Main", null);
            popover.ContentViewController = storyboard.InstantiateControllerWithIdentifier("Shop") as NSViewController;
            popover.Behavior = NSPopoverBehavior.Transient;
            popover.Show(CoreGraphics.CGRect.Empty, (NSView)sender, NSRectEdge.MinYEdge);
        }

        partial void thingsToDo_clicked(NSObject sender)
        {
            var popover = new NSPopover();
            this.View.AccessibilityEnabled = false;
            var storyboard = NSStoryboard.FromName("Main", null);
            popover.ContentViewController = storyboard.InstantiateControllerWithIdentifier("ThingsToDo") as NSViewController;
            popover.Behavior = NSPopoverBehavior.Transient;
            popover.Show(CoreGraphics.CGRect.Empty, (NSView)sender, NSRectEdge.MinYEdge);
            
        }

        partial void singOut_clicked(NSObject sender)
        {
            this.View.Window.Close();
            var storyboard = NSStoryboard.FromName("Main", null);
            var controller = storyboard.InstantiateControllerWithIdentifier("LogIn") as NSWindowController;
            controller.ShowWindow(Self);
        }

        partial void searched(NSSearchField sender)
        {
            if (enterPressed == true)
            {
                enterPressed = false;
                String searchingAfter = sender.StringValue;
                this.InvokeOnMainThread(() =>
                {
                    userHandler.handleSearch(searchingAfter);
                });
            }
        }

        public void showMessage(string message)
        {
            
        }

        public void openWindow()
        {
            
        }

        public void showActivity(Activity activity)
        {
            this.InvokeOnMainThread(() => {
                segueName = activity.name;
                segueType = activity.type;
                segueLocation = activity.location;
                segueHours = activity.hours;
                wasActivityName = true;
                PerformSegue("user1", this);
            
            });
        }

        public void showList(List<Activity> activities)
        {
            this.InvokeOnMainThread(() =>
            {
                foreach (Activity activity in activities)
                {
                    segueList += activity.name + ", " + activity.type + ", " + activity.location + ", " + activity.hours + "\n";
                }
                PerformSegue("user2", this);
                segueList = "";
               
            });
        }

        public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
        {
            this.InvokeOnMainThread(() =>
            {
              
                if (wasActivityName == true)
                {
                    wasActivityName = false;
                    var destination = segue.DestinationController as UserSearch;
                    destination.segueName = segueName;
                    destination.segueLocation = segueLocation;
                    destination.segueType = segueType;
                    destination.segueHours = segueHours;
                }
                else
                {
                    var destination = segue.DestinationController as SearchActivities;
                    destination.segueList = segueList;
                }
            });
        }

        public void showUser(User user)
        {
            
        }

        public void showAlert()
        {

            InvokeOnMainThread(() =>
            {
                var storyboard = NSStoryboard.FromName("Main", null);
                var controller = storyboard.InstantiateControllerWithIdentifier("Alert") as NSWindowController;
                controller.ShowWindow(Self);
            });
        }
    }
}
