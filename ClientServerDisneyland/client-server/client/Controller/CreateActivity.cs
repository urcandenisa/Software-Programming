// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using client.ObjectHandler;
using core.Models;
using System.Collections.Generic;

namespace client
{
	public partial class CreateActivity : NSViewController, IMessageController
	{
        bool check = false;
        private BaseHandler baseHandler;
        private AdminHandler adminHandler;
        public String segueName;
        public String segueType;
        public String segueHours;
        public String segueLocation;
        public String segueAvailable;
        public String segueMaxNumber;
        public CreateActivity (IntPtr handle) : base (handle)
		{
            baseHandler = new BaseHandler(this);
            adminHandler = new AdminHandler(this);
            segueName = "";
            segueType = "";
            segueLocation = "";
            segueHours = "";
            segueAvailable = "";
            segueMaxNumber = "";
        }

        public CreateActivity()
        {
            baseHandler = new BaseHandler(this);
            adminHandler = new AdminHandler(this);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            baseHandler = new BaseHandler(this);
            adminHandler = new AdminHandler(this);
        }

        partial void back(NSObject sender)
        {
            var storyboard = NSStoryboard.FromName("Main", null);
            var controller = storyboard.InstantiateControllerWithIdentifier("AdministratorView") as NSWindowController;
            controller.ShowWindow(this);
            this.View.Window.Close();
           // this.View.Window.OrderOut(null);
        }

        partial void @checked(NSObject sender)
        {
            check = true;
            messageLog.StringValue = "";
        }

        partial void available_clicked(NSObject sender)
        {
            throw new NotImplementedException();
        }

        partial void createActivity_clicked(NSObject sender)
        {
           
            if (check == false)
            {
                messageLog.StringValue = "Please read the terms and conditions!";
            }
            else
            {
                Activity activity = new Activity
                {
                    name = name.StringValue,
                    type = type.StringValue,
                    location = location.StringValue,
                    hours = hours.StringValue,

                    available = available.StringValue == "true" ? true : false,
                    
                };
                if (spots.StringValue.CompareTo("") != 0) activity.maxNumber = Int32.Parse(spots.StringValue); else activity.maxNumber = 0;
                if (price.StringValue.CompareTo("") != 0) activity.pricePerPerson = Int32.Parse(price.StringValue); else activity.pricePerPerson = 0;
                int.TryParse(rate.StringValue, out int rateNumber);
                activity.rate = rateNumber;
                this.InvokeOnMainThread(() =>
                {
                    adminHandler.messageController = this;
                    adminHandler.createActivity(activity);

                });
            }
        }

        partial void delete(NSObject sender)
        {
            String searchAfter = name.StringValue;
            this.InvokeOnMainThread(() => {
                adminHandler.messageController = this;
                adminHandler.deleteActivity(searchAfter);
            });
        }

        partial void hours_clicked(NSObject sender)
        {
            
        }

        partial void location_clicked(NSObject sender)
        {
            
        }

        partial void price_clicked(NSObject sender)
        {
            
        }

        partial void name_clicked(NSObject sender)
        {
            
        }

        partial void quickLook(NSObject sender)
        {
              String searchingAfter = name.StringValue;
              adminHandler.searchActivity(searchingAfter);
        }

        partial void spots_clicked(NSObject sender)
        {
            
        }

        partial void type_clicked(NSObject sender)
        {
            
        }

        public void showMessage(String message)
        {
            this.InvokeOnMainThread(() => { messageLog.StringValue = message; });
        }

        public void openWindow()
        {
            
        }

        public void showActivity(Activity activity)
        {
            this.InvokeOnMainThread(() => {
                if (activity != null)
                {
                    segueName = activity.name;
                    segueType = activity.type;
                    segueLocation = activity.location;
                    segueHours = activity.hours;
                    segueAvailable = activity.available == true ? "available" : "not available";
                    segueMaxNumber = activity.maxNumber.ToString();
                }
                PerformSegue("admin5", this);
            });
        }
        public override void PrepareForSegue(NSStoryboardSegue segue, NSObject sender)
        {
            this.InvokeOnMainThread(() =>
            {
                var destination = segue.DestinationController as AdminSearch;
                destination.segueName = segueName;
                destination.segueLocation = segueLocation;
                destination.segueType = segueType;
                destination.segueAvailable = segueAvailable;
                destination.segueMaxNumber = segueMaxNumber;
                destination.segueHours = segueHours;

            });
        }


        public void showUser(User user)
        {
            throw new NotImplementedException();
        }

        public void showList(List<Activity> activites)
        {
            throw new NotImplementedException();
        }

        public void showAlert()
        {
            throw new NotImplementedException();
        }
    }
}
